// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  slug           String      @unique(map: "product_slug_idx")
  category       String
  description    String
  specifications String[]    @default([])
  images         String[]
  price          Decimal     @default(0) @db.Decimal(12, 2)
  brand          String
  model          String?
  rating         Decimal     @default(0) @db.Decimal(3, 2)
  numReviews     Int         @default(0)
  stock          Int
  isFeatured     Boolean     @default(false)
  banner         String?
  createdAt      DateTime    @default(now()) @db.Timestamp(6)
  OrderItem      OrderItem[]
  Review         Review[]
}

model Gallery {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String
  description  String
  cover        String
  galleryItems GalleryItem[]
  createdAt    DateTime      @default(now()) @db.Timestamp(6)
  updatedAt    DateTime      @updatedAt
}

model GalleryItem {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  galleryId   String   @db.Uuid
  title       String
  description String
  image       String
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @updatedAt
  gallery     Gallery  @relation(fields: [galleryId], references: [id], onDelete: Cascade)
}

model User {
  id                   String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String?              @default("NO_NAME")
  email                String               @unique(map: "user_email_idx")
  emailVerified        DateTime?            @db.Timestamp(6)
  image                String?
  password             String?
  role                 String               @default("user")
  avatar               String?
  address              Json?                @db.Json
  paymentMethod        String?
  createdAt            DateTime             @default(now()) @db.Timestamp(6)
  updatedAt            DateTime             @updatedAt
  failedSignInAttempts Int                  @default(0)
  isBlocked            Boolean              @default(false)
  lastFailedAttempt    DateTime?
  account              Account[]
  Session              Session[]
  Bag                  Bag[]
  Order                Order[]
  Review               Review[]
  PasswordResetToken   PasswordResetToken[]
}

model Account {
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @db.Timestamp(6)
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token     String   @unique
  userId    String   @db.Uuid
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}

model Bag {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String?  @db.Uuid
  sessionBagId  String
  items         Json[]   @default([]) @db.Json
  itemsPrice    Decimal  @db.Decimal(12, 2)
  totalPrice    Decimal  @db.Decimal(12, 2)
  shippingPrice Decimal  @db.Decimal(12, 2)
  taxPrice      Decimal  @db.Decimal(12, 2)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String      @db.Uuid
  shippingAddress Json        @db.Json
  paymentMethod   String
  paymentResult   Json?       @db.Json
  itemsPrice      Decimal     @db.Decimal(12, 2)
  shippingPrice   Decimal     @db.Decimal(12, 2)
  taxPrice        Decimal     @db.Decimal(12, 2)
  totalPrice      Decimal     @db.Decimal(12, 2)
  isPaid          Boolean     @default(false)
  isDelivered     Boolean     @default(false)
  paidAt          DateTime?   @db.Timestamp(6)
  deliveredAt     DateTime?   @db.Timestamp(6)
  createdAt       DateTime    @default(now()) @db.Timestamp(6)
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderitems      OrderItem[]
}

model OrderItem {
  orderId   String  @db.Uuid
  productId String  @db.Uuid
  qty       Int
  price     Decimal @db.Decimal(12, 2)
  name      String
  slug      String
  image     String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId], map: "orderitems_orderId_productId_pk")
}

model Review {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String   @db.Uuid
  productId          String   @db.Uuid
  rating             Int
  title              String
  description        String
  isVerifiedPurchase Boolean  @default(true)
  createdAt          DateTime @default(now()) @db.Timestamp(6)
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
